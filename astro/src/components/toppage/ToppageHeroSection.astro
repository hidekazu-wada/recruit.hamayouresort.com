---
import WaveDecoration from '@components/common/WaveDecoration.astro';
---

<!-- GSAPをhead内で読み込み -->
<script is:inline>
  // GSAPが未読み込みの場合のみ読み込む
  if (typeof gsap === 'undefined') {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js';
    script.onload = () => {
      // GSAP読み込み完了後にアニメーション初期化
      initHeroAnimation();
    };
    document.head.appendChild(script);
  } else {
    // すでにGSAPが読み込まれている場合は即時実行
    initHeroAnimation();
  }
</script>

<section id="hero">
  <h1 class="hero-catchcopy">
    本気<span>で</span>遊べ<span>ば</span><br />仕事<span>になる</span>
  </h1>

  <picture>
    <!-- デスクトップ用（1024px以上） -->
    <source
      srcset="/top-hero-desktop.webp"
      media="(min-width: 1024px)"
      type="image/webp"
    />
    <!-- タブレット用（744px以上1024px未満） -->
    <source
      srcset="/top-hero-tablet.webp"
      media="(min-width: 744px)"
      type="image/webp"
    />
    <!-- モバイル用（デフォルト） -->
    <img src="/top-hero-mobile.webp" alt="トップページのヒーロー画像" />
  </picture>

  <div class="btn-wrapper btn-hero-wrapper">
    <a href="/new-graduate" class="item btn-hero">
      <span class="btn-text">新卒で挑戦</span>
    </a>
    <a href="/mid-career" class="item btn-hero">
      <span class="btn-text">中途で経験を活かす</span>
    </a>
    <a href="/arbeit" class="item btn-hero">
      <span class="btn-text">空いてる日にバイト</span>
    </a>
  </div>

  <WaveDecoration fillColor="#E7F3F9" />

  <!-- アニメーション制御 -->
  <script is:inline>
    function initHeroAnimation() {
      const hero = document.querySelector('.hero-catchcopy');
      if (!hero || typeof gsap === 'undefined') return;

      // アニメーションの時間調整用変数
      const ANIMATION = {
        TEXT_DELAY: 0,
        BTN_DELAY: 0,
        BTN_STAGGER: 0.06,
      };

      function wrapChars(node) {
        if (node.nodeType === Node.TEXT_NODE) {
          const chars = node.textContent.split('');
          return chars.map((char) => {
            const span = document.createElement('span');
            span.textContent = char;
            span.classList.add('char');
            return span;
          });
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          if (node.nodeName === 'BR') {
            return [node.cloneNode(false)];
          }
          const newElem = node.cloneNode(false);
          node.childNodes.forEach((child) => {
            wrapChars(child).forEach((c) => newElem.appendChild(c));
          });
          return [newElem];
        }
        return [];
      }

      const nodes = Array.from(hero.childNodes);
      hero.textContent = '';
      nodes.forEach((node) => {
        wrapChars(node).forEach((c) => hero.appendChild(c));
      });

      // 文字を2グループに分ける
      const chars = hero.querySelectorAll('.char');
      const firstGroup = Array.from(chars).slice(0, 7); // 「本気で遊べば、」の文字数
      const secondGroup = Array.from(chars).slice(7); // 「仕事になる」の文字数

      gsap.set('.char', { opacity: 0, y: 20 });

      // 初期状態の設定
      gsap.set('.btn-hero-wrapper', { opacity: 0, x: 60 });
      gsap.set('.btn-hero-wrapper .item', { opacity: 0, x: 60 });

      // アニメーション開始関数
      function startHeroAnimation() {
        console.log('Starting hero animation');
        // 1グループ目（本気で遊べば、）
        gsap.to(firstGroup, {
          opacity: 1,
          y: 0,
          stagger: 0.08,
          duration: 0.6,
          ease: 'power3.out',
          delay: 0.8,
          onComplete: () => {
            // 2グループ目（仕事になる）を少し遅らせて開始
            gsap.to(secondGroup, {
              opacity: 1,
              y: 0,
              stagger: 0.08,
              duration: 0.6,
              delay: ANIMATION.TEXT_DELAY,
              ease: 'power3.out',
              onComplete: () => {
                // btn-wrapperを表示（少し遅らせて）
                gsap.to('.btn-hero-wrapper', {
                  opacity: 1,
                  x: 0,
                  duration: 0.1,
                  delay: ANIMATION.BTN_DELAY,
                  ease: 'power2.out',
                  onComplete: () => {
                    // ボタンを個別にスライドイン
                    gsap.to('.btn-hero-wrapper .item', {
                      opacity: 1,
                      x: 0,
                      stagger: ANIMATION.BTN_STAGGER,
                      duration: 0.3,
                      ease: 'power2.out',
                    });
                  },
                });
              },
            });
          },
        });
      }

      // オープニングアニメーションの完了を待つ
      const hasVisited = sessionStorage.getItem('hasVisited');
      console.log('Hero section - Current session state:', { hasVisited });

      if (hasVisited) {
        // 2回目以降の訪問時は即時開始
        console.log('Hero section - Not first visit, starting immediately');
        startHeroAnimation();
      } else {
        // 初回訪問時はオープニング完了を待つ
        console.log(
          'Hero section - First visit, waiting for opening completion'
        );
        document.addEventListener('openingComplete', startHeroAnimation, {
          once: true,
        });
      }
    }
  </script>
</section>

<style lang="scss">
  @import '@styles/functions.scss';
  @import '@styles/mixins.scss';

  section#hero {
    position: relative;

    h1 {
      color: #fff;
      text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
      font-size: spx(60);
      font-weight: 900;
      line-height: spx(84);
      letter-spacing: spx(3);
      position: absolute;
      top: spx(90);
      left: spx(30);

      @include tablet-up {
        font-size: spx(60) * 0.75;
        line-height: spx(84) * 0.75;
        letter-spacing: spx(3) * 0.75;
        top: spx(90) * 0.75;
        left: spx(30) * 0.75;
      }

      @include desktop-up {
        font-size: ppx(120);
        line-height: ppx(168);
        top: ppx(107);
        left: ppx(21);
      }
      span,
      .char {
        color: #fff;
        font-size: spx(34);
        font-weight: 900;
        line-height: 140%;
        letter-spacing: spx(1.7);

        @include tablet-up {
          font-size: spx(34) * 0.75;
          letter-spacing: spx(1.7) * 0.75;
        }

        @include desktop-up {
          font-size: ppx(50);
        }
      }
    }

    picture {
      img {
        display: block;
        width: 100%;
        height: 188vw;
        object-fit: cover;
        @include tablet-up {
          height: 140vw;
        }
        @include desktop-up {
          height: 56vw;
        }
      }
    }

    .btn-wrapper {
      position: absolute;
      left: 0;
      bottom: spx(88);
      display: flex;
      flex-flow: column;
      gap: spx(20);
      opacity: 0;
      transform: translateX(60px);
      @include tablet-up {
        bottom: spx(88) * 0.75;
        gap: spx(20) * 0.75;
      }
      @include desktop-up {
        left: unset;
        right: 0;
        bottom: ppx(112);
        gap: ppx(20);
      }
      .item {
        display: block;
        width: spx(220);
        height: spx(47);
        display: grid;
        place-items: center;
        border: 1px solid rgba(255, 255, 255, 0.9);
        background: linear-gradient(
          93deg,
          rgba(255, 255, 255, 0.8) 0.01%,
          rgba(255, 255, 255, 0.6) 99.99%
        );
        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.12);
        backdrop-filter: blur(35px);
        text-decoration: none;

        @include tablet-up {
          width: spx(220) * 0.75;
          height: spx(47) * 0.75;
        }

        @include desktop-up {
          width: ppx(220);
          height: ppx(47);
        }

        .btn-text {
          font-size: spx(16);
          font-weight: 500;
          line-height: 100%;
          letter-spacing: spx(1.92);

          @include tablet-up {
            font-size: spx(16) * 0.75;
            letter-spacing: spx(1.92) * 0.75;
          }

          @include desktop-up {
            font-size: ppx(18);
            letter-spacing: ppx(2.16);
          }
        }
      }
    }
  }
</style>
