---
import MySiteLayout from '@layouts/MySiteLayout.astro';
import LowerPageHeader from '@components/common/LowerPageHeader.astro';
import LowerPageH2 from '@components/common/LowerPageH2.astro';
import JobModal from '@components/jobspage/JobModal.astro';
import {
  jobsData,
  facilities,
  jobTypes,
  employmentTypes,
} from '@data/jobsData';

// ユニークな値を抽出する関数
function getUniqueValues(
  data: typeof jobsData,
  key: 'facility' | 'jobType' | 'employmentType'
) {
  return [...new Set(data.map((item) => item[key]))] as string[];
}

// 各フィルターのユニークな値を取得
const uniqueFacilities = getUniqueValues(jobsData, 'facility');
const uniqueJobTypes = getUniqueValues(jobsData, 'jobType');
const uniqueEmploymentTypes = getUniqueValues(jobsData, 'employmentType');
---

<MySiteLayout>
  <LowerPageHeader pageTitleEn="Jobs" pageTitleJa="求人" />
  <section class="job-search">
    <LowerPageH2 title="職種一覧" variant="default" position="left" />
    <nav class="job-search__filters">
      <ul>
        <li>
          <select name="facility" id="facility">
            <option value="">施設から選択</option>
            {
              uniqueFacilities.map((value) => (
                <option value={value}>
                  {facilities[value as keyof typeof facilities]}
                </option>
              ))
            }
          </select>
        </li>
        <li>
          <select name="jobType" id="jobType">
            <option value="">職種から選択</option>
            {
              uniqueJobTypes.map((value) => (
                <option value={value}>
                  {jobTypes[value as keyof typeof jobTypes]}
                </option>
              ))
            }
          </select>
        </li>
        <li>
          <select name="employmentType" id="employmentType">
            <option value="">形態から選択</option>
            {
              uniqueEmploymentTypes.map((value) => (
                <option value={value}>
                  {employmentTypes[value as keyof typeof employmentTypes]}
                </option>
              ))
            }
          </select>
        </li>
      </ul>
      <button type="button"><span>検索</span></button>
    </nav>

    <div class="job-list">
      {
        jobsData.map((job) => (
          <article class="job-card" data-job-id={job.id}>
            <span class="job-card__line" />
            <h3 class="job-card__title">{job.title}</h3>
            <div class="job-card__tags">
              <span class="job-card__tag">［{job.facility}］</span>
              <span class="job-card__tag">[{job.jobType}]</span>
              <span class="job-card__tag">[{job.employmentType}]</span>
            </div>
            <p class="job-card__description">{job.description}</p>
            <button type="button" class="job-card__link">
              詳しく見る
            </button>
            <span class="job-card__line" />
          </article>
        ))
      }
    </div>
  </section>
  <JobModal />
</MySiteLayout>

<script>
  // MicroModalを読み込む
  // @ts-ignore
  import MicroModal from 'micromodal';
  import { jobsData, type JobPosition } from '@data/jobsData';

  // クライアントサイドで求人データを使用できるようにマッピング
  const jobsDataMap: { [key: string]: JobPosition } = {};
  jobsData.forEach((job) => {
    jobsDataMap[job.id] = job;
  });

  // MicroModalの初期化
  MicroModal.init({
    openTrigger: 'data-micromodal-trigger',
    closeTrigger: 'data-micromodal-close',
    disableFocus: false,
    disableScroll: true,
    awaitOpenAnimation: false,
    awaitCloseAnimation: false,
  });

  // フィルタリング関数の実装
  function filterJobs(
    jobs: JobPosition[],
    filters: {
      facility?: string;
      jobType?: string;
      employmentType?: string;
    }
  ) {
    return jobs.filter((job) => {
      if (filters.facility && job.facility !== filters.facility) return false;
      if (filters.jobType && job.jobType !== filters.jobType) return false;
      if (
        filters.employmentType &&
        job.employmentType !== filters.employmentType
      )
        return false;
      return true;
    });
  }

  // イベントリスナーの実装
  document.addEventListener('DOMContentLoaded', () => {
    const facilitySelect = document.getElementById(
      'facility'
    ) as HTMLSelectElement;
    const jobTypeSelect = document.getElementById(
      'jobType'
    ) as HTMLSelectElement;
    const employmentTypeSelect = document.getElementById(
      'employmentType'
    ) as HTMLSelectElement;
    const searchButton = document.querySelector('.job-search__filters button');
    const jobList = document.querySelector('.job-list');

    function updateJobList() {
      const filters = {
        facility: facilitySelect.value,
        jobType: jobTypeSelect.value,
        employmentType: employmentTypeSelect.value,
      };

      const filteredJobs = filterJobs(jobsData, filters);

      // 求人リストの更新
      if (jobList) {
        jobList.innerHTML = filteredJobs
          .map(
            (job) => `
          <article class="job-card" data-job-id="${job.id}">
            <span class="job-card__line" />
            <h3 class="job-card__title">${job.title}</h3>
            <div class="job-card__tags">
              <span class="job-card__tag">［${job.facility}］</span>
              <span class="job-card__tag">[${job.jobType}]</span>
              <span class="job-card__tag">[${job.employmentType}]</span>
            </div>
            <p class="job-card__description">${job.description}</p>
            <button type="button" class="job-card__link">
              詳しく見る
            </button>
            <span class="job-card__line" />
          </article>
        `
          )
          .join('');
      }
    }

    // 検索ボタンのクリックイベント
    searchButton?.addEventListener('click', updateJobList);

    // 求人カードにクリックイベントを追加
    const jobCards = document.querySelectorAll('.job-card');

    jobCards.forEach((card) => {
      card.addEventListener('click', () => {
        const jobId = card.getAttribute('data-job-id');
        if (!jobId) return;

        const job = jobsDataMap[jobId];
        if (!job) return;

        // モーダルのコンテンツを更新
        const modalTitle = document.getElementById('modal-job-title');
        const modalContent = document.getElementById('modal-job-content');
        const modalContainer = document.querySelector('.modal__container');

        if (modalContent) {
          // 詳細情報を設定
          modalContent.innerHTML = `
    <article class="job-modal-content">
      <span class="job-modal__line"></span>
      <div class="job-modal__content">
        <header class="job-modal__header">
          <h2 class="job-modal__title">${job.title}</h2>
          <dl class="job-modal__meta">
            <div class="job-modal__meta-item">
              <dt>施設</dt>
              <dd>${job.facility}</dd>
            </div>
            <div class="job-modal__meta-item">
              <dt>職種</dt>
              <dd>${job.jobType}</dd>
            </div>
            <div class="job-modal__meta-item">
              <dt>形態</dt>
              <dd>${job.employmentType}</dd>
            </div>
          </dl>
        </header>
        
        <section class="job-modal__section">
          <h3 class="job-modal__section-title">業務内容</h3>
          <ul class="job-modal__list">
            ${job.duties.map((duty) => `<li>${duty}</li>`).join('')}
          </ul>
        </section>

        <section class="job-modal__section">
          <h3 class="job-modal__section-title">応募資格</h3>
          <dl class="job-modal__requirements">
            <div class="job-modal__requirements-group">
              <dt class="job-modal__requirements-term">必須</dt>
              <dd class="job-modal__requirements-description">
                ${job.requirements.required}
              </dd>
            </div>
            <div class="job-modal__requirements-group">
              <dt class="job-modal__requirements-term">歓迎</dt>
              <dd class="job-modal__requirements-description">
                ${job.requirements.preferred}
              </dd>
            </div>
          </dl>
        </section>

        <section class="job-modal__section">
          <h3 class="job-modal__section-title">勤務地・時間</h3>
          <address class="job-modal__address">
            ${job.location}
          </address>
          <dl class="job-modal__work-info">
            <div class="job-modal__work-info-group">
              <dt>シフト例</dt>
              <dd>${job.workInfo.shifts}</dd>
            </div>
            <div class="job-modal__work-info-group">
              <dt>残業</dt>
              <dd>${job.workInfo.overtime}</dd>
            </div>
            <div class="job-modal__work-info-group">
              <dt>勤務形態</dt>
              <dd>${job.workInfo.workStyle}</dd>
            </div>
          </dl>
        </section>

        <section class="job-modal__section">
          <h3 class="job-modal__section-title">待遇</h3>
          <ul class="job-modal__benefits">
            ${job.benefits.map((benefit) => `<li>${benefit}</li>`).join('')}
          </ul>
        </section>

        <section class="job-modal__section">
          <h3 class="job-modal__section-title">休日・休暇</h3>
          <ul class="job-modal__holidays">
            ${job.holidays.map((holiday) => `<li>${holiday}</li>`).join('')}
          </ul>
        </section>
      </div>
      
      <div class="job-modal__button-container">
        <a 
          href="#" 
          class="primary-btn default center"
          style="--button-bg: linear-gradient(96deg, #054965 0.03%, #59a1c0 99.97%); --text-color: #fff;"
        >
          <span>エントリーする（3分で完了）</span>
        </a>
      </div>
      
      <span class="job-modal__line"></span>
    </article>
  `;

          // スクロール位置をリセット
          if (modalContainer) {
            modalContainer.scrollTop = 0;
            setTimeout(() => {
              modalContainer.scrollTop = 0;
            }, 0);
          }
        }

        // モーダルを表示
        MicroModal.show('modal-job');
      });
    });
  });
</script>

<style lang="scss">
  @import '@styles/functions.scss';
  @import '@styles/mixins.scss';

  .job-search {
    padding: 0 spx(20) spx(60);
    @include tablet-up {
      padding: 0 spx(20) * 0.75 spx(60) * 0.75;
    }
    @include desktop-up {
      padding: 0 ppx(160) ppx(60);
    }
    &__filters {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      margin-top: spx(40);
      @include tablet-up {
        margin-top: spx(40) * 0.75;
        justify-content: space-around;
      }
      @include desktop-up {
        justify-content: space-between;
        align-items: center;
        margin-top: ppx(40);
      }
      ul {
        display: flex;
        flex-flow: column;
        gap: spx(20);
        @include tablet-up {
          gap: spx(20) * 0.75;
        }
        @include desktop-up {
          flex-flow: row;
          gap: ppx(20);
        }
        li {
          select {
            background-color: #fff;
            color: #054965;
            font-size: spx(14);
            font-weight: 500;
            line-height: 100%;
            width: spx(238);
            text-align: center;
            padding: spx(14) 0;

            @include tablet-up {
              font-size: spx(14) * 0.75;
              width: spx(238) * 0.75;
              padding: spx(14) * 0.75 0;
            }

            @include desktop-up {
              font-size: ppx(18);
              width: ppx(300);
              padding: ppx(20) 0;
            }
          }
        }
      }
      button {
        width: spx(104);
        height: spx(40);
        background: linear-gradient(96deg, #054965 0.03%, #59a1c0 99.97%),
          linear-gradient(92deg, #0170b9 0.11%, #01b9b6 99.89%);
        display: grid;
        place-items: center;
        @include tablet-up {
          width: spx(104) * 0.75;
          height: spx(40) * 0.75;
        }
        @include desktop-up {
          width: ppx(100);
          height: ppx(54);
        }
        span {
          color: #f5f7f9;
          font-family: 'Zen Kaku Gothic New';
          font-size: spx(12);
          font-style: normal;
          font-weight: 500;
          line-height: 100%;
          @include tablet-up {
            font-size: spx(12) * 0.75;
          }
          @include desktop-up {
            font-size: ppx(16);
          }
        }
      }
    }
    .job-list {
      margin-top: spx(60);
      display: grid;
      grid-template-columns: max-content;
      gap: spx(28);
      justify-content: center;
      @include tablet-up {
        grid-template-columns: max-content max-content;
        margin-top: spx(60) * 0.75;
        gap: spx(28) * 0.75;
      }
      @include desktop-up {
        margin-top: ppx(124);
        grid-template-columns: max-content max-content;
        gap: ppx(50);
      }
      .job-card {
        width: spx(322);
        border: 1px solid rgba(255, 255, 255, 0.8);
        background: #fff;
        box-shadow: 4px 4px 0px 0px #59a1c0;
        padding: spx(20);
        display: flex;
        flex-direction: column;
        cursor: pointer;
        transition:
          transform 0.2s ease,
          box-shadow 0.2s ease;

        &:hover {
          transform: translateY(-2px);
          box-shadow: 6px 6px 0px 0px #59a1c0;
        }

        @include tablet-up {
          width: 44vw;
          padding: spx(20) * 0.75;
        }
        @include desktop-up {
          width: ppx(500);
          padding: ppx(28) ppx(24);
        }
        &__line {
          display: block;
          width: 100%;
          height: 1px;
          background: #31456a;
          @include tablet-up {
          }
        }
        &__title {
          font-size: spx(14);
          font-weight: 700;
          line-height: 140%;
          margin-top: spx(20);

          @include tablet-up {
            font-size: spx(14) * 0.75;
            margin-top: spx(20) * 0.75;
          }

          @include desktop-up {
            font-size: ppx(18);
            margin-top: ppx(10);
          }
        }
        &__tags {
          margin-top: spx(4);
          @include tablet-up {
            margin-top: spx(4) * 0.75;
          }
          @include desktop-up {
            margin-top: ppx(4);
          }
          .job-card__tag {
            font-size: spx(12);
            font-weight: 500;
            line-height: 140%;

            @include tablet-up {
              font-size: spx(12) * 0.75;
            }

            @include desktop-up {
              font-size: ppx(14);
            }
          }
        }
        &__description {
          font-size: spx(14);
          font-weight: 500;
          line-height: 140%;
          margin-top: spx(14);
          flex-grow: 1;

          @include tablet-up {
            font-size: spx(14) * 0.75;
            margin-top: spx(14) * 0.75;
          }

          @include desktop-up {
            font-size: ppx(18);
            margin-top: ppx(10);
          }
        }

        &__link {
          display: block;
          font-size: spx(12);
          font-weight: 500;
          line-height: 140%;
          margin-top: spx(20);
          margin-bottom: spx(20);
          margin-inline: auto;

          @include tablet-up {
            font-size: spx(12) * 0.75;
            margin-top: spx(20) * 0.75;
            margin-bottom: spx(20) * 0.75;
          }

          @include desktop-up {
            font-size: ppx(12);
            margin-top: ppx(20);
            margin-bottom: ppx(10);
          }
        }
      }
    }
  }
</style>
